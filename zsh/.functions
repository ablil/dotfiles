#!/bin/zsh

function mk() {
  mkdir $1 && cd $1
}

# touch but for nested files
function mkfile() {
  f_dirname=$(dirname $1)
  if [[ ! -d $f_dirname ]]; then
      mkdir -p $f_dirname
  fi
  touch $1
}

function mkgit() {
  mkdir $1 && cd $1 && git init && touch .gitignore && git config --local credential.helper store
}


# vi - vi a file, including hidden directories
function vif() {
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# f - get a file
function f() {
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && echo "${files[@]}"
}



# cd - cd to directory, including hidden directories
function cdf() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# historyf - repeat history
function historyf() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}

# gswf - checkout git branch
function gswf() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# gsh - git show 
function gshf() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# vid - open all files inside directory
function vid() {
    vim $(git ls-files && git ls-files --others --exclude-standard)
}

function wipe() {
    for arg in $@; do
        if [[ -f $arg ]]; then
            shred -zvu $arg
        fi
        if [[ -d $arg ]]; then
            shred -zvu $arg/**/* && rmdir -p $arg
        fi
    done
}

# open a directory under $HOME/repos
function repo() {
    cd $HOME/repos/$(fzf < <(ls $HOME/repos))
}
