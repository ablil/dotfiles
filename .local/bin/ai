#!/usr/bin/env python

import argparse
import utils
import aicommit
import aireview
import aitest

logger = utils.create_logger(__name__)

def cli():
    parser = argparse.ArgumentParser(
        prog='ai',
        description="AI dev tools"
    )
    subparsers = parser.add_subparsers(help='sub comamands', dest='command')

    review_parser = subparsers.add_parser('review', help='review code and suggest improvements')
    review_parser.add_argument(
        '-f', '--files',
        nargs='*',
        help='list of files to read, if not provided, all changed files will be read',
        default=[]
    )
    review_parser.add_argument('-d', '--dirty', action='store_true', help='use dirty files, default is staged files', default=False)


    tests_parser = subparsers.add_parser('test', help='generate tests for code change')
    tests_parser.add_argument(
        '-f', '--files',
        nargs='*',
        help='list of files to read, if not provided, all changed files will be read',
        default=[]
    )
    tests_parser.add_argument('-d', '--dirty', action='store_true', help='use dirty files, default is staged files', default=False)

    commit_parser = subparsers.add_parser('commit', help='generate commit message from code change')
    commit_parser.add_argument('-s', '--staged', action='store_true', help='use staged files (default)')
    commit_parser.add_argument('-d', '--dirty', action='store_true', help='use dirty files')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        exit(1)

    return args


if __name__ == '__main__':
    args = cli()
    if args.command == 'commit':
        aicommit.prompt_user(not args.dirty)

    if args.command == 'review':
        aireview.review_code_change(args.files, not args.dirty)

    if args.command == 'test':
        aitest.generate_tests(args.files, not args.dirty)
