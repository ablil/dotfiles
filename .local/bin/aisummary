#!/usr/bin/env python
import dataclasses
from pydantic import BaseModel
from typing import List
import subprocess
import sys
import aiutils
import utils

logger = utils.create_logger(__name__)

__prompt = """
Given the following pull request changes (Git diff), summarize the changes, and highlight the most
important files that requires my attention while reviewing it.

Here is the Git diff:

"""


@dataclasses.dataclass
class File:
    filepath: str
    description: str


class StructuredOutput(BaseModel):
    summary: str
    files: List[File]


def git_diff() -> str:
    try:
        result = subprocess.run(
            ['git', 'diff', 'main', 'HEAD'],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        logger.error(f"Naaaaaaah this ain't normal: {e.stderr}")
        sys.exit(1)


def main():
    diff = git_diff()
    prompt = aiutils.Prompt(
        prompt=__prompt + diff,
        response_schema=StructuredOutput,
    )
    response = aiutils.gemini_chat(prompt)
    logger.highlight("summary: ")
    logger.info(response.summary)
    logger.highlight("Do NOT miss these files: ")
    for file in response.files:
        logger.info(file.filepath)
        logger.info(file.description)
        logger.info("\n")


if __name__ == "__main__":
    main()
