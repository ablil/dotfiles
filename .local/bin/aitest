#!/usr/bin/env python3
# description: Ask Gemini AI to write some tests for your

import subprocess
import sys
import os
import utils
from pydantic import BaseModel
import aiutils
import tempfile
import json
from typing import Optional
from rich.console import Console
from rich.markdown import Markdown

logger = utils.create_logger(__name__)

__prompt = """
You are senior sofware engineer, you are tasked with writing unit tests for some code change.
Cover at least the happy path scenarios and add any necessary other scnearios

Here is the Git diff:


"""

class StructuredOutput(BaseModel):
    commit_msg: str
    commit_description: Optional[str]

def git_diff() -> str:
    try:
        result = subprocess.run(
            ['git', 'diff', '--staged'],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        logger.error(f"Error getting git diff: {e.stderr}")
        sys.exit(1)




def __prompt_user(files) -> str:
    code_changes = ""
    
    # parse content of files
    if len(files):
        for file in files:
            with open(file, 'r') as fd:
                code_changes += fd.read()
    else:
        code_changes = git_diff()

    prompt = aiutils.Prompt(
        prompt=__prompt + code_changes,
        response_schema=None
    )
    return aiutils.gemini_chat(prompt)


if __name__ == '__main__':  
    # get files if provided
    files = []
    if len(sys.argv) > 1:
        files.extend(sys.argv[1:])

    result = __prompt_user(files)

    console = Console()
    md = Markdown(result)
    console.print(md)
